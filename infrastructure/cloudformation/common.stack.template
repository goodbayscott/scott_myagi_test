{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description":
    "Common resources shared between staging and production stacks",

  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing SSH keypair",
      "Type": "String",
      "Default": "infrastructure-access"
    },

    "BootstrapScriptsS3Addr": {
      "Description": "S3 address of folder which contains bootstrap scripts",
      "Type": "String",
      "Default": "s3://myagi-infra/bootstrap"
    },

    "InfraGitRepo": {
      "Description": "Address for repo which contains ansible config",
      "Type": "String",
      "Default": "git@github.com:Myagi/infrastructure.git"
    },

    "InfraGitSSHKeyS3Addr": {
      "Description":
        "S3 address of private key which has access to the infrastructure Git repo",
      "Type": "String",
      "Default": "s3://myagi-infra/github-infra-access"
    },

    "AMI": {
      "Description":
        "AMI to use for servers. Default is ubuntu-trusty-14.04 image.",
      "Type": "String",
      "Default": "ami-d24c5cb3"
    },

    "BuildInstanceType": {
      "Description": "Instance type to use for web servers",
      "Type": "String",
      "Default": "m1.small",
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type"
    },

    "FTPInstanceType": {
      "Description": "Instance type to use for FTP server",
      "Type": "String",
      "Default": "m1.small",
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type"
    }
  },

  "Resources": {
    "CFNUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "cloudformation:DescribeStackResource",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "cloudformation:SignalResource",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:Get*", "s3:List*"],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "HostKeys": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "CFNUser"
        }
      }
    },

    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true
      }
    },

    "Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.0.0/24",
        "Tags": [{ "Key": "Application", "Value": { "Ref": "AWS::StackId" } }]
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{ "Key": "Application", "Value": { "Ref": "AWS::StackId" } }]
      }
    },

    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },

    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Application", "Value": { "Ref": "AWS::StackId" } }]
      }
    },

    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },

    "SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },

    "NetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Application", "Value": { "Ref": "AWS::StackId" } }]
      }
    },

    "InboundHTTPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "80", "To": "80" }
      }
    },

    "InboundSSHNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "22", "To": "22" }
      }
    },

    "InboundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "1024", "To": "65535" }
      }
    },

    "OutBoundHTTPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "80", "To": "80" }
      }
    },

    "OutBoundHTTPSNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "443", "To": "443" }
      }
    },

    "OutBoundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "1024", "To": "65535" }
      }
    },

    "OutBoundSSHNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "22", "To": "22" }
      }
    },

    "SubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet" },
        "NetworkAclId": { "Ref": "NetworkAcl" }
      }
    },

    "IPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "AttachGateway",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": { "Ref": "BuildServerInstance" }
      }
    },

    "FTPIPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "AttachGateway",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": { "Ref": "FTPServerInstance" }
      }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "FTPSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Enable FTP access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "BuildServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Ref": "AMI"
        },
        "SecurityGroupIds": [{ "Ref": "InstanceSecurityGroup" }],
        "SubnetId": { "Ref": "Subnet" },
        "InstanceType": { "Ref": "BuildInstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": { "VolumeSize": "24" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-build"
                ]
              ]
            }
          },
          {
            "Key": "myagi_instance_type",
            "Value": "build"
          },
          {
            "Key": "myagi_stack",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Application",
            "Value": { "Ref": "AWS::StackId" }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash",
                "\n",
                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1",
                "\n",
                "apt-get update",
                "\n",
                "apt-get -y install python-pip",
                "\n",
                "apt-get -y install awscli",
                "\n",
                "mkdir ~/.aws/",
                "\n",
                "echo $'",
                "[default]\n",
                "region = ",
                { "Ref": "AWS::Region" },
                "\n",
                "aws_access_key_id = ",
                { "Ref": "HostKeys" },
                "\n",
                "aws_secret_access_key = ",
                { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] },
                "' > ~/.aws/config",
                "\n",
                "cd /home/ubuntu",
                "\n",
                "aws s3 cp --recursive ",
                { "Ref": "BootstrapScriptsS3Addr" },
                " bootstrap",
                "\n",
                "chmod +x bootstrap/*.sh",
                "\n",
                "cd bootstrap",
                "\n",

                "./setup-build-server.sh ",
                { "Ref": "AWS::StackName" },
                " ",
                { "Ref": "AWS::Region" },
                " ",
                "a",
                " ",
                { "Ref": "InfraGitSSHKeyS3Addr" },
                " ",
                { "Ref": "InfraGitRepo" },
                " ",
                "BuildServerInstance",
                " ",
                "BuildServerInstance",
                " ",
                { "Ref": "HostKeys" },
                " ",
                { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] },
                "\n"
              ]
            ]
          }
        }
      }
    },

    "FTPServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Ref": "AMI"
        },
        "SecurityGroupIds": [{ "Ref": "FTPSecurityGroup" }],
        "SubnetId": { "Ref": "Subnet" },
        "InstanceType": { "Ref": "FTPInstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": { "VolumeSize": "24" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-ftp"
                ]
              ]
            }
          },
          {
            "Key": "myagi_instance_type",
            "Value": "ftp"
          },
          {
            "Key": "myagi_stack",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Application",
            "Value": { "Ref": "AWS::StackId" }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash",
                "\n",
                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1",
                "\n",
                "apt-get update",
                "\n",
                "apt-get -y install python-pip",
                "\n",
                "apt-get -y install awscli",
                "\n",
                "mkdir ~/.aws/",
                "\n",
                "echo $'",
                "[default]\n",
                "region = ",
                { "Ref": "AWS::Region" },
                "\n",
                "aws_access_key_id = ",
                { "Ref": "HostKeys" },
                "\n",
                "aws_secret_access_key = ",
                { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] },
                "' > ~/.aws/config",
                "\n",
                "cd /home/ubuntu",
                "\n",
                "aws s3 cp --recursive ",
                { "Ref": "BootstrapScriptsS3Addr" },
                " bootstrap",
                "\n",
                "chmod +x bootstrap/*.sh",
                "\n",
                "cd bootstrap",
                "\n",

                "./setup-ftp-server.sh ",
                { "Ref": "AWS::StackName" },
                " ",
                { "Ref": "AWS::Region" },
                " ",
                "a",
                " ",
                { "Ref": "InfraGitSSHKeyS3Addr" },
                " ",
                { "Ref": "InfraGitRepo" },
                " ",
                "FTPServerInstance",
                " ",
                "FTPServerInstance",
                " ",
                { "Ref": "HostKeys" },
                " ",
                { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] },
                "\n"
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {}
}
